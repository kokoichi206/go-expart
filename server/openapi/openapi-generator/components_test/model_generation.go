/*
components examples

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package components_test

import (
	"encoding/json"
	"fmt"
)

// Generation 1, 2, 3, 4, 5 のいずれか
type Generation string

// List of Generation
const (
	GENERATION__1 Generation = "1"
	GENERATION__2 Generation = "2"
	GENERATION__3 Generation = "3"
	GENERATION__4 Generation = "4"
	GENERATION__5 Generation = "5"
)

// All allowed values of Generation enum
var AllowedGenerationEnumValues = []Generation{
	"1",
	"2",
	"3",
	"4",
	"5",
}

func (v *Generation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Generation(value)
	for _, existing := range AllowedGenerationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Generation", value)
}

// NewGenerationFromValue returns a pointer to a valid Generation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenerationFromValue(v string) (*Generation, error) {
	ev := Generation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Generation: valid values are %v", v, AllowedGenerationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Generation) IsValid() bool {
	for _, existing := range AllowedGenerationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Generation value
func (v Generation) Ptr() *Generation {
	return &v
}

type NullableGeneration struct {
	value *Generation
	isSet bool
}

func (v NullableGeneration) Get() *Generation {
	return v.value
}

func (v *NullableGeneration) Set(val *Generation) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneration) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneration(val *Generation) *NullableGeneration {
	return &NullableGeneration{value: val, isSet: true}
}

func (v NullableGeneration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

