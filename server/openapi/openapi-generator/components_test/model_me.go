/*
components examples

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package components_test

import (
	"encoding/json"
	"fmt"
)

// checks if the Me type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Me{}

// Me struct for Me
type Me struct {
	Id int64 `json:"id"`
	FirstName string `json:"first_name"`
	LastName string `json:"last_name"`
	// NOT required example
	MiddleName *string `json:"middle_name,omitempty"`
	// nullable example
	Email NullableString `json:"email,omitempty"`
	Tag []string `json:"tag"`
	Gen Generation `json:"gen"`
	// for any key value pairs (dictionary) see: https://swagger.io/docs/specification/data-models/dictionaries/ 
	Labels map[string]string `json:"labels"`
}

type _Me Me

// NewMe instantiates a new Me object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMe(id int64, firstName string, lastName string, tag []string, gen Generation, labels map[string]string) *Me {
	this := Me{}
	this.Id = id
	this.FirstName = firstName
	this.LastName = lastName
	this.Tag = tag
	this.Gen = gen
	this.Labels = labels
	return &this
}

// NewMeWithDefaults instantiates a new Me object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeWithDefaults() *Me {
	this := Me{}
	return &this
}

// GetId returns the Id field value
func (o *Me) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Me) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Me) SetId(v int64) {
	o.Id = v
}

// GetFirstName returns the FirstName field value
func (o *Me) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *Me) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *Me) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *Me) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *Me) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *Me) SetLastName(v string) {
	o.LastName = v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *Me) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetMiddleNameOk() (*string, bool) {
	if o == nil || IsNil(o.MiddleName) {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *Me) HasMiddleName() bool {
	if o != nil && !IsNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *Me) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Me) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Me) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *Me) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *Me) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *Me) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *Me) UnsetEmail() {
	o.Email.Unset()
}

// GetTag returns the Tag field value
func (o *Me) GetTag() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *Me) GetTagOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tag, true
}

// SetTag sets field value
func (o *Me) SetTag(v []string) {
	o.Tag = v
}

// GetGen returns the Gen field value
func (o *Me) GetGen() Generation {
	if o == nil {
		var ret Generation
		return ret
	}

	return o.Gen
}

// GetGenOk returns a tuple with the Gen field value
// and a boolean to check if the value has been set.
func (o *Me) GetGenOk() (*Generation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gen, true
}

// SetGen sets field value
func (o *Me) SetGen(v Generation) {
	o.Gen = v
}

// GetLabels returns the Labels field value
func (o *Me) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *Me) GetLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *Me) SetLabels(v map[string]string) {
	o.Labels = v
}

func (o Me) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	if !IsNil(o.MiddleName) {
		toSerialize["middle_name"] = o.MiddleName
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	toSerialize["tag"] = o.Tag
	toSerialize["gen"] = o.Gen
	toSerialize["labels"] = o.Labels
	return toSerialize, nil
}

func (o *Me) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"first_name",
		"last_name",
		"tag",
		"gen",
		"labels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMe := _Me{}

	err = json.Unmarshal(bytes, &varMe)

	if err != nil {
		return err
	}

	*o = Me(varMe)

	return err
}

type NullableMe struct {
	value *Me
	isSet bool
}

func (v NullableMe) Get() *Me {
	return v.value
}

func (v *NullableMe) Set(val *Me) {
	v.value = val
	v.isSet = true
}

func (v NullableMe) IsSet() bool {
	return v.isSet
}

func (v *NullableMe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMe(val *Me) *NullableMe {
	return &NullableMe{value: val, isSet: true}
}

func (v NullableMe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


