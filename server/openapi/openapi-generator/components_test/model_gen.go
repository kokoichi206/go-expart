/*
components examples

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package components_test

import (
	"encoding/json"
	"fmt"
)

// Gen 1, 2, 3, 4, 5 のいずれか
type Gen string

// List of Gen
const (
	GEN__1 Gen = "1"
	GEN__2 Gen = "2"
	GEN__3 Gen = "3"
	GEN__4 Gen = "4"
	GEN__5 Gen = "5"
)

// All allowed values of Gen enum
var AllowedGenEnumValues = []Gen{
	"1",
	"2",
	"3",
	"4",
	"5",
}

func (v *Gen) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Gen(value)
	for _, existing := range AllowedGenEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Gen", value)
}

// NewGenFromValue returns a pointer to a valid Gen
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenFromValue(v string) (*Gen, error) {
	ev := Gen(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Gen: valid values are %v", v, AllowedGenEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Gen) IsValid() bool {
	for _, existing := range AllowedGenEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Gen value
func (v Gen) Ptr() *Gen {
	return &v
}

type NullableGen struct {
	value *Gen
	isSet bool
}

func (v NullableGen) Get() *Gen {
	return v.value
}

func (v *NullableGen) Set(val *Gen) {
	v.value = val
	v.isSet = true
}

func (v NullableGen) IsSet() bool {
	return v.isSet
}

func (v *NullableGen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGen(val *Gen) *NullableGen {
	return &NullableGen{value: val, isSet: true}
}

func (v NullableGen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

